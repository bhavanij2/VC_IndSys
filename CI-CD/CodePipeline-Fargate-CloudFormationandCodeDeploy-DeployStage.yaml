AWSTemplateFormatVersion: "2010-09-09"

Description: >
  AWS CloudFormation Template for Continuous Delievery: This template
  builds an AWS CodePipeline pipeline that implements a continuous delivery release
  process for ECS/Fargate deployments.

Parameters:
  PipelineName:
    Description: 'A name for pipeline.'
    Type: String
  S3Source:
    Description: 'The name of the S3 bucket that contains the source artifact, which must be in the same region as this stack.'
    Type: String
  S3SourceKey:
    Description: 'The file name of the source artifact, such as myfolder/myartifact.zip'
    Type: String

  AppImage:
    Description: 'Application Image ARN in ECR'
    Type: String

  ArtifactBucket:
    Description: 'An S3 bucket that will be used to store artifacts from CodePipeline. Versioning must be enabled.'
    Type: String

  ECSClusterName:
    Description: 'The name of the ECS Cluster'
    Type: String
  ECSServiceName:
    Description: 'The name of the ECS Service'
    Type: String

Resources:

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Ref AppImage
                Effect: Allow
                Action:
                  - ecr:DescribeRepositories
                  - ecr:CreateRepository
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
              - Resource: "*"
                Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameters
#              - Resource: '*'
#                Effect: Allow
#                Action:
#                  - cloudformation:CreateStack
#                  - cloudformation:DescribeStacks
#                  - cloudformation:DeleteStack
#                  - cloudformation:UpdateStack
#                  - cloudformation:CreateChangeSet
#                  - cloudformation:ExecuteChangeSet
#                  - cloudformation:DeleteChangeSet
#                  - cloudformation:DescribeChangeSet
#                  - cloudformation:SetStackPolicy


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:PassRole
#              - Resource: '*'
#                Effect: Allow
#                Action:
#                  - cloudformation:CreateStack
#                  - cloudformation:DescribeStacks
#                  - cloudformation:DeleteStack
#                  - cloudformation:UpdateStack
#                  - cloudformation:CreateChangeSet
#                  - cloudformation:ExecuteChangeSet
#                  - cloudformation:DeleteChangeSet
#                  - cloudformation:DescribeChangeSet
#                  - cloudformation:SetStackPolicy


  ECSServiceCFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodePipelineFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersionin
              - Resource: '*'
                Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:CreateSecurityGroup
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
              - Resource: '*'
                Effect: Allow
                Action:
                  - elasticloadbalancing:CreateTargetGroup
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:ModifyTargetGroupAttributes
                  - elasticloadbalancing:DeleteTargetGroup
                  - elasticloadbalancing:CreateRule
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DeleteRule
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecs:CreateService
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - ecs:DeleteService
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:DescribeLogGroups
                  - logs:PutRetentionPolicy
                  - logs:CreateLogStream
                  - logs:PutLogEvents



  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-codebuild'
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      ServiceRole: !Ref CodeBuildServiceRole

  Application:
      Type : AWS::CodeDeploy::Application

  DeploymentConfig:
      Type: AWS::CodeDeploy::DeploymentConfig
      DependsOn: Application
      Properties:
        MinimumHealthyHosts:
          Type: FLEET_PERCENT
          Value: 75

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref 'Application'
      Deployment:
        Description: "Initial deployment"
        IgnoreApplicationStopFailures: true
        Revision: {
          RevisionType: "S3"
          S3Location:
            Bucket: !Ref 'S3Bucket'
            Key: !Ref "S3Key"
            BundleType: "Zip"
      ServiceRoleArn" : {"Fn::GetAtt" : ["CodeDeployServiceIAMRole", "Arn"] }

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref 'PipelineName'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref 'S3ArtifactStore'
      DisableInboundStageTransitions: []
      Stages:

        - Name: SourceStage
          Actions:
            - Name: S3Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref 'S3Source'
                S3ObjectKey: !Ref 'S3SourceKey'
              OutputArtifacts:
                - Name: SourceArtifacts
              RunOrder: 1

        - Name: BuildStage
          Actions:
            - Name: BuildAndPushImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifacts
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

        - Name: DeployStage
          Actions:
            - Name: DeployImageToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref 'Application'
                DeploymentGroupName: !Ref 'DeploymentGroup'
                DeploymentConfigName: !Ref DeploymentConfig
              RunOrder: 1



Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
